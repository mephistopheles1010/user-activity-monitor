openapi: 3.0.0

#region : info
info:
  version: 1.0.0
  title: Social Network back-end API
  description: Social Network back-end API
#endregion : info

#region : servers
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/mephistopheles1010/SocialNet/1.0.0
#endregion : servers

security:
  - BearerAuth: []

#region : paths
paths:
  #region : users
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: User uuid retrieved from Firebase authentication service
        schema:
          type: string

    put:
      description: Update user information. Only updating of role properties is allowed. Only own user instance updating is allowed. You can set only 'publisher' role if it isn't already setted.
      requestBody:
        required: true
        description: Properties to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        200:
          description: Successfully updated a user
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  #endregion : users

  #region : profiles
  /profiles/{profileId}:
    parameters:
      - name: profileId
        in: path
        required: true
        description: user profile id (profileId from Profile model schema)
        schema:
          type: string

    get:
      description: Obtain information about user profile
      responses:
        200:
          description: Specified by profileId profile info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    put:
      description: Update information about user profile
      requestBody:
        required: true
        description: Properties to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        200:
          description: Successfully updated a user profile
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    delete:
      description: Delete information about user profile
      responses:
        200:
          description: Successfully delete a user profile
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"


  /profiles:
    
    get:
      description: Obtain information about user profiles
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            example: Ghyih877654sjnGY4eeDc
        - name: startAt
          in: query
          description: start index of data items to retrieve
          schema:
            type: integer
            minimum: 0
            example: 4
        - name: limit
          in: query
          description: max number of items to retrieve
          schema:
            type: integer
            minimum: 0
            maximum: 100
            example: 11
        - name: orderBy
          in: query
          schema:
            type: string
            example: createdAt
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [asc, desc]
            example: asc
      responses:
        200:
          description: List of profile info. If no items found empty array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileList"
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    
    post:
      description: Create user profile
      requestBody:
        required: true
        description: Properties to be setted to newly created profile
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        201:
          description: Successfully created a user profile
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"


  /profiles/{profileId}/social-account-links/{socialAccountLinkId}:
    
    parameters:
      - name: profileId
        in: path
        required: true
        description: user profile id (profileId from Profile model schema)
        schema:
          type: string
      - name: socialAccountLinkId
        in: path
        required: true
        description: user social account link id (socialAccountLinkId from SocialAccountLink model schema)
        schema:
          type: string
    
    delete:
      description: Delete social account link from user profile
      responses:
        200:
          description: Successfully deleted social account link from user profile
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"


  /profiles/{profileId}/social-account-links:
    
    parameters:
      - name: profileId
        in: path
        required: true
        description: user profile id (profileId from Profile model schema)
        schema:
          type: string

    post:
      description: Add social account link to user profile
      requestBody:
        required: true
        description: Social account link info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SocialAccountLink"
      responses:
        201:
          description: Successfully added social account link
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"


  #endregion : profiles

  #region : subscriptions
  /subscriptions:

    post:
      description: Create a subscription
      requestBody:
        required: true
        description: Properties to be setted to newly created subscription
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Subscription"
      responses:
        201:
          description: Successfully created a subscription
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  #endregion : subscriptions

  #region : links
  /links/{linkId}:
    parameters:
      - name: linkId
        in: path
        required: true
        description: link id (linkId from Link model schema)
        schema:
          type: string

    get:
      description: Obtain link info
      responses:
        200:
          description: Specified by linkId link info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Link"
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    put:
      description: Update information about link
      requestBody:
        required: true
        description: Properties to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        200:
          description: Successfully updated a link
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    delete:
      description: Delete information about link
      responses:
        200:
          description: Successfully deleted a link information
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"


  /links:
    
    get:
      description: Obtain list of link info
      parameters:
        - name: profileId
          in: query
          schema:
            type: string
            example: Ghyih877654sjnGY4eeDc
        - name: startAt
          in: query
          description: start index of data items to retrieve
          schema:
            type: integer
            minimum: 0
            example: 4
        - name: limit
          in: query
          description: max number of items to retrieve
          schema:
            type: integer
            minimum: 0
            maximum: 100
            example: 11
        - name: orderBy
          in: query
          schema:
            type: string
            example: createdAt
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [asc, desc]
            example: asc
      responses:
        200:
          description: List of link info. If no items found empty array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkList"
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    
    post:
      description: Create link
      requestBody:
        required: true
        description: Properties to be setted to newly created link
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Link"
      responses:
        201:
          description: Successfully created a link
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  #endregion : links

  #region : posts
  /posts/{postId}:
    parameters:
      - name: postId
        in: path
        required: true
        description: user post id (postId from Post model schema)
        schema:
          type: string

    get:
      description: Obtain post information
      responses:
        200:
          description: Specified by postId post information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    put:
      description: Update post information
      requestBody:
        required: true
        description: Properties to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        200:
          description: Successfully updated a post
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    delete:
      description: Delete post information
      responses:
        200:
          description: Successfully deleted a post
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /posts:
   
    get:
      description: Obtain list of post info
      parameters:
        - name: profileId
          in: query
          schema:
            type: string
            example: Ghyih877654sjnGY4eeDc
        - name: startAt
          in: query
          description: start index of data items to retrieve
          schema:
            type: integer
            minimum: 0
            example: 4
        - name: limit
          in: query
          description: max number of items to retrieve
          schema:
            type: integer
            minimum: 0
            maximum: 100
            example: 11
        - name: orderBy
          in: query
          schema:
            type: string
            example: createdAt
        - name: orderDirection
          in: query
          schema:
            type: string
            enum: [asc, desc]
            example: asc
      responses:
        200:
          description: List of post info. If no items found empty array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostList"
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    
    post:
      description: Create post
      requestBody:
        required: true
        description: Properties to be setted to newly created post
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        201:
          description: Successfully created a post
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

     
  /posts/{postId}/views:
    parameters:
      - name: postId
        in: path
        required: true
        description: user post id (postId from Post model schema)
        schema:
          type: string

    post:
      description: Register post view
      responses:
        201:
          description: Successfully registered a post view
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"


  /posts/{postId}/media/{mediaId}:
    parameters:
      - name: postId
        in: path
        required: true
        description: user post id (postId from Post model schema)
        schema:
          type: string
      - name: mediaId
        in: path
        required: true
        description: post media id (mediaId from MediaItem model schema)
        schema:
          type: string

    get:
      description: Obtain post media item
      responses:
        200:
          description: Specified by mediaId post media item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaItem"
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    delete:
      description: Delete post media item
      responses:
        200:
          description: Successfully deleted a post media item
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"


  /posts/{postId}/media:
    parameters:
      - name: postId
        in: path
        required: true
        description: user post id (postId from Post model schema)
        schema:
          type: string

    get:
      description: Obtain list of post media item
      responses:
        200:
          description: List of post media item. If no items found empty array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaItemList"
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    
    post:
      description: Add media item to the post
      requestBody:
        required: true
        description: Properties to be setted to newly created post media item
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MediaItem"
      responses:
        201:
          description: Successfully added a post media item
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"


  /posts/{postId}/media/{mediaId}/tags/{tagId}:
    parameters:
      - name: postId
        in: path
        required: true
        description: user post id (postId from Post model schema)
        schema:
          type: string
      - name: mediaId
        in: path
        required: true
        description: post media id (mediaId from MediaItem model schema)
        schema:
          type: string
      - name: tagId
        in: path
        required: true
        description: post media tag id (tagId from ReferenceTag model schema)
        schema:
          type: string

    get:
      description: Obtain post media item tag
      responses:
        200:
          description: Specified by tagId post media item tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReferenceTag"
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    put:
      description: Update post media item tag
      requestBody:
        required: true
        description: Properties to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReferenceTag"
      responses:
        200:
          description: Successfully updated a post media item tag
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    delete:
      description: Delete post media item tag
      responses:
        200:
          description: Successfully deleted a post media item tag
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    
  /posts/{postId}/media/{mediaId}/tags:
    parameters:
      - name: postId
        in: path
        required: true
        description: user post id (postId from Post model schema)
        schema:
          type: string
      - name: mediaId
        in: path
        required: true
        description: post media id (mediaId from MediaItem model schema)
        schema:
          type: string

    get:
      description: Obtain list of post media item tag
      responses:
        200:
          description: List of post media item tag. If no items found empty array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReferenceTagList"
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    
    post:
      description: Add reference tag to the post media item
      requestBody:
        required: true
        description: Properties to be setted to newly created post media item tag
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReferenceTag"
      responses:
        201:
          description: Successfully added a post media item tag
        400:
          $ref: "#/components/responses/InvalidInputs"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  #endregion : posts

#endregion : paths


#region : components
components:
  #region : securitySchemes
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  #endregion : securitySchemes

  #region : responses
  responses:
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InvalidInputs:
      description: Input data not valid for this request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  #endregion : responses

  #region : schemas
  schemas:
    Error:
      #can be extanded later
      description: Respose errors template
      properties:
        code:
          type: number
          example: 401
        message:
          type: string
          example: Unauthorized
    User:
      description: Model describing user
      properties:
        role:
          type: string
          enum: ["publisher", "trusted-publisher", "admin"]
          example: "publisher"
    SocialAccountLink:
      description: Model describing social account link
      properties:
        socialAccountLinkId:
          type: string
          pattern: ^[a-zA-Z0-9]{11}$
        platform:
          type: string
          enum:
            [
              Facebook,
              Twitter,
              Instagram,
              YouTube,
              Soundcloud,
              Bandcamp,
              LinkedIn,
              Clubhouse,
              Substack,
              WhatsApp,
              Telegram,
              Signal,
              Twitch,
              Patreon,
              Pinterest,
              TikTok,
              Snapchat,
            ]
        url:
          type: string
        createdAt:
          type: number
    Profile:
      description: Model describing user profile
      properties:
        userId:
          type: string
        email:
          type: string
        phone:
          type: string
        displayName:
          type: string
        profileId:
          type: string
          pattern: ^[a-z0-9]{3,}$
        bio:
          type: string
          maxLength: 200
        socialAccountLinks:
          type: array
          items:
            $ref: "#/components/schemas/SocialAccountLink"
        backgroundImage:
          type: string
        colorTheme:
          type: string
        isLinksOnForeground:
          type: boolean
        publisherId:
          type: string
        createdAt:
          type: integer
      required:
        - userId
    ProfileList:
      description: List of user profile
      type: array
      items:
        $ref: "#/components/schemas/Profile"
    ReferenceTag:
      description: Model describing reference tag on posts media file
      properties:
        referenceTagId:
          type: string
          pattern: ^[a-zA-Z0-9]{11}$
        title:
          type: string
        url:
          type: string
        position:
          type: object
          properties:
            offset0X:
              type: number
            offset0Y:
              type: number
    ReferenceTagList:
      description: List of post media reference tag
      type: array
      items:
        $ref: "#/components/schemas/ReferenceTag"
    MediaItem:
      description: Model describing post media file
      properties:
        mediaItemId:
          type: string
          pattern: ^[a-zA-Z0-9]{11}$
        url:
          type: string
        mime:
          type: string
        size:
          type: object
          properties:
            width:
              type: number
            hight:
              type: number
        tags: 
          type: array
          items: 
            type: string
        referenceTags:
          type: array
          items:
            $ref: "#/components/schemas/ReferenceTag"
    MediaItemList:
      description: List of post media item
      type: array
      items:
        $ref: "#/components/schemas/MediaItem"
    Thumbnail:
      description: Model describing post thumbnail
      properties:
        url:
          type: string
        mime:
          type: string
        size:
          type: object
          properties:
            width:
              type: number
            hight:
              type: number
    Post:
      description: Model describing user posts
      properties:
        profileId:
          description: profileId from Profile model
          type: string
          pattern: ^[a-zA-Z0-9]{11}$
        postId:
          type: string
          pattern: ^[a-zA-Z0-9]{11}$
        views:
          type: number
        thumbnail:
          $ref: "#/components/schemas/Thumbnail"
        media:
          type: array
          items:
            $ref: "#/components/schemas/MediaItem"
        createdAt:
          type: number
    PostList:
      description: List of post
      type: array
      items:
        $ref: "#/components/schemas/Post"
    Link:
      description: Model describing user link
      properties:
        profileId:
          description: profileId from Profile model
          type: string
          pattern: ^[a-zA-Z0-9]{11}$
        linkId:
          type: string
          pattern: ^[a-zA-Z0-9]{11}$
        title:
          type: string
        url:
          type: string
        createdAt:
          type: number
    LinkList:
      description: List of link
      type: array
      items:
        $ref: "#/components/schemas/Link" 
    Subscription:
      description: Model describing follower subscription
      properties:
        profileId:
          description: profileId from Profile model
          type: string
          pattern: ^[a-zA-Z0-9]{11}$
        subscriptionId:
          type: string
          pattern: ^[a-zA-Z0-9]{11}$
        subscriptionToken:
          type: string
        createdAt:
          type: number
  #endregion : schemas
#endregion : components
